<?html version="1.0" enconding="UTF-8"?>
<!--
=======================================================
Build file for WordPress
=======================================================
-->
<project basedir=".." default="all" name="WordPress for BlackBerry">
    <!--
    ========================================================================
    Setting variable
    ========================================================================
    -->
    <taskdef name="rapc"    classpath="build/bb-ant-tools-1.1.jar" classname="ca.slashdev.bb.tasks.RapcTask" />
    <taskdef name="jadtool" classpath="build/bb-ant-tools-1.1.jar" classname="ca.slashdev.bb.tasks.JadtoolTask" />
    <taskdef name="alx"     classpath="build/bb-ant-tools-1.1.jar" classname="ca.slashdev.bb.tasks.AlxTask" />

	<taskdef resource="org/tigris/subversion/svnant/svnantlib.xml">
	    <classpath>
	      <fileset dir="build/svnant-1.2.1" includes="svn*.jar" />
	    </classpath>
	</taskdef>

	
    <target name="init">
        <property file="build/build.properties" />
        <property file="build/release.properties" />
    	
        <condition property="debug" value="true" else="false">
            <equals arg1="${build.type}" arg2="debug" trim="true" casesensitive="false"/>
        </condition>
        <condition property="nodebug" value="false" else="true">
            <equals arg1="${build.type}" arg2="debug" trim="true" casesensitive="false"/>
        </condition>
        
    	<svn>
    		<!-- status path="${basedir}" revisionProperty="svn.revision" / -->
    		<info target="${basedir}"/>
    	 </svn>
    	        	
        <property name="module.version" value="${release.major}.${release.minor}.${svn.info.lastRev}" />

        <property name="platform"              value="os42" />
        <property name="module.name"           value="WordPress"/>
        <property name="module.release.prefix" value="WordPress"/>
                        
        <property name="module.fullname"       value="WordPress for BlackBerry"/>
        <property name="module.desc"           value="WordPress for BlackBerry mobile app"/>
        <property name="module.company"        value="Automattic - Danais"/>

        <property name="dir.src"          value="src"  />
        <property name="dir.lib"           value="lib"  />
        <property name="dir.docs"          value="docs" />
        <property name="dir.build"         value="build" />

        <!-- from prop file 
        property name="dir.output.base" value="c:/tmp/output" / -->

        <property name="dir.output"      value="${dir.output.base}/${platform}" />
        
        <property name="dir.output.lib"           value="${dir.output}/lib" />
        <property name="dir.output.lib.compile"   value="${dir.output.lib}/compile" />
        <property name="dir.output.lib.jar"       value="${dir.output.lib}/jar" />
        <property name="dir.output.lib.preverify" value="${dir.output.lib}/preverify" />
        
        <property name="dir.output.app"           value="${dir.output}/app" />
        <property name="dir.output.app.compile"   value="${dir.output.app}/compile" />
        <property name="dir.output.app.jar"       value="${dir.output.app}/jar" />
        <property name="dir.output.app.preverify" value="${dir.output.app}/preverify" />
        <property name="dir.output.rapc"          value="${dir.output}/rapc" />
        <property name="dir.output.sign"          value="${dir.output}/sign" />
        <property name="dir.output.release"       value="${dir.output}/release" />

        <property name="dir.export"               value="${dir.output.base}/export" />

        <property name="icon"                 value="application-icon.png" />
        <property name="icon_rollover"        value="application-icon.png" /> <!-- set to ${icon} to disable rollover -->

        <property name="jde.prj" value="wordpress_${platform}.jdp"/>

    </target>
    
    
    <target name="clean" depends="init">
        <delete dir="${dir.output}" />
        <delete dir="${dir.export}" />
        
        <mkdir dir="${dir.output}"/>
        
        <mkdir dir="${dir.output.lib}"/>
        <mkdir dir="${dir.output.lib.compile}"/>
        <mkdir dir="${dir.output.lib.jar}"/>
        <mkdir dir="${dir.output.lib.preverify}"/>
        
        <mkdir dir="${dir.output.app}"/>
        <mkdir dir="${dir.output.app.compile}"/>
        <mkdir dir="${dir.output.app.jar}"/>
        <mkdir dir="${dir.output.app.preverify}"/>
 
        <mkdir dir="${dir.output.rapc}"/>
        <mkdir dir="${dir.output.sign}"/>
        <mkdir dir="${dir.output.release}"/>
        <mkdir dir="${dir.export}"/>
    </target>

  

    <target name="rapc" depends="init">
   
    	<echo message="Compiling ${module.name} with rapc"/>

        <copy tofile="${dir.output.rapc}/${icon}"
              file="${basedir}/src/${icon}"/>
    	
        <rapc jdehome="${rim.home}" quiet="true"
            srcdir="${dir.src}"
            destdir="${dir.output.rapc}"
            output="${module.name}"
            verbose="true"
            nodebug="${nodebug}">
        	        	
        	<define tag="DEBUG" if="${debug}"/> <!-- define preprocessor tag -->

            <jdp
                type="cldc"
                vendor="${module.company}"
                title="${module.fullname}"
                description="${module.desc}"
                ribbonposition="0"
                systemmodule="false"
                runonstartup="false"
                arguments=""
                version="${module.version}"
                startuptier="7"
                icon="${icon}"/>
        	<src>
           		<fileset dir="${dir.src}">
            		   	<include name="**/*java"/>
            		</fileset>
        		<fileset dir="${dir.lib}">
        		   	<include name="**/*.jar"/>
        		</fileset>
			</src>

        	
            <import>
            	<fileset dir="${rim.home}/lib/">
            	     <include name="**/*.jar"/>
 	           </fileset>
            </import>
        	
        </rapc>
    </target>


    <target name="sign" depends="rapc">
        <copy todir="${dir.output.sign}">
            <fileset dir="${dir.output.rapc}">
                <include name="**/*"/>
            </fileset>
        </copy>
        
        <echo message="Please sign the .cod file located at ${dir.output.sign}" />
    
        <java jar="${rim.home}/bin/SignatureTool.jar" failonerror="false" fork="true">
            <arg value="-a"/>
           <arg value="-p"/> 
            <arg value="${bb.sigtool.password}"/> 
            <arg value="-C"/>
            <arg file="${dir.output.sign}/${module.name}.cod"/> 
        </java>
        <exec executable="${rim.home}/bin/UpdateJad.exe" dir="${dir.output.sign}" failonerror="true">
            <arg value="${module.name}.jad" />
        </exec>

    </target>

    <target name="jad">
         <propertyfile file="build/release.properties">
            <entry key="build.date" type="date" value="now" pattern="yyyyMMdd"/>
        </propertyfile>
    	
        <copy todir="${dir.output.release}">
            <fileset dir="${dir.output.sign}">
                <include name="**/*"/>
                <exclude name="*.debug"/>
            </fileset>
        </copy>
        <copy todir="${dir.output.release}/docs">
            <fileset dir="${dir.docs}">
                <include name="**/*"/>
            </fileset>
        </copy>

        <jadtool input="${dir.output.sign}/${module.name}.jad" destdir="${dir.output.release}/ota">
            <fileset dir="${dir.output.sign}" includes="*.cod" />
        </jadtool>
        
    	<copy file="${dir.output.release}/ota/${module.name}.jad"
    		tofile="${dir.output.release}/ota/${module.release.prefix}.jad" />
    		
    	
    <!-- 	<propertyfile file="${dir.output.release}/ota/${module.name}.jad">
    	            <entry key="build_date" type="date" value="now" pattern="yyyyMMdd"/>
    	</propertyfile> -->
    </target>

    <target name="alx" depends="init">
        <alx destdir="${dir.output.release}/alx" filename="${module.name}.alx">
            <application id="com.wordpress.bb.${module.name}" name="${module.fullname}"
                         description="${module.desc}"
                         version="${module.version}"
                         vendor="${module.company}">
                <codset>
                    <fileset dir="${dir.output.release}/ota" includes="*.cod" />
                </codset>
            </application>
        </alx>

        <zip zipfile="${dir.output.release}/alx/${module.name}.zip">
            <zipfileset dir="${dir.output.release}/alx" includes="*.cod, *.alx" />
        </zip>
    </target>


    <target name="package" depends="init,release,export">
        <mkdir dir="${dir.output.release}/${module.release.prefix}"/>
        <copy todir="${dir.output.release}/${module.release.prefix}">
            <fileset dir="${dir.output.release}">
                <exclude name="${module.release.prefix}" />
                <exclude name="ota//" />
            </fileset>
        </copy>
        <zip destfile="${dir.output.release}/${module.name}.zip">
            <fileset dir="${dir.output.release}/${module.release.prefix}" />
        </zip>
        <delete dir="${dir.output.release}/${module.release.prefix}" />
        <copy todir="${dir.output.release}">
            <fileset dir="${dir.export}">
                <include name="*.zip" />
            </fileset>
        </copy>
    </target>
    
	<target name="release" depends="init,sign,jad,alx">
        <zip zipfile="${dir.output.release}/ota/${module.name}.zip">
            <zipfileset dir="${dir.output.release}/ota" includes="*.jad, *.cod, *.alx" />
        </zip>
    </target>

    <target name="all" depends="release,export" />

    <target name="export" depends="clean">
        
        <copy todir="${dir.export}/${dir.src}" preservelastmodified="true">
            <fileset dir="${dir.src}/"/>
        </copy>


        <copy todir="${dir.export}/${dir.lib}" preservelastmodified="true">
            <fileset dir="${dir.lib}/"/>
        </copy>

        <copy todir="${dir.export}/${dir.docs}" preservelastmodified="true">
             <fileset dir="${dir.docs}/"/>
        </copy>

        <copy todir="${dir.export}/${dir.build}" preservelastmodified="true">
                    <fileset dir="${dir.build}/"/>
        </copy>

        <zip destfile="${dir.export}/${module.name}-src-${module.version}.zip">
            <zipfileset dir="${dir.export}" prefix="${module.release.prefix}"/>
        </zip>
    </target>
    

</project>

