package com.wordpress.bb;

import net.rim.device.api.applicationcontrol.ApplicationPermissions;
import net.rim.device.api.applicationcontrol.ApplicationPermissionsManager;


/**
 * This class uses ApplicationPermissions API available in BlackBerry v4.2.1
 * handheld software and higher.  If the required permissions for WordPress application have
 * been denied by the user, the application will prompt for access to these resources. 
 * note: If using a simulator go to Edit/Preferences/Simulator/General in the JDE and 
 * select "Enable Device Security". 
 * You will also need to have the cod file generated by this project signed with the 
 * Signature Tool. 
 */
public class WordPressApplicationPermissions{
	
	
	private static WordPressApplicationPermissions singletonObject;
	
	public static WordPressApplicationPermissions getIstance() {
		if (singletonObject == null) {
			singletonObject = new WordPressApplicationPermissions();
		}
		return singletonObject;
	}
    
    //singleton
    private WordPressApplicationPermissions() {

    }
	
	  /**
	 *  If the permissions are insufficient, the user will be prompted
     * to increase the level of permissions.
     */
    public void checkPermissions()
    {
        // NOTE: This app leverages the following permissions: 
        // --
        // --
        // --
        // --
    	//
        
        // Capture the current state of permissions and check against the requirements.
        ApplicationPermissions original = ApplicationPermissionsManager.getInstance().getApplicationPermissions();
        
        if( original.getPermission( ApplicationPermissions.PERMISSION_MEDIA ) == ApplicationPermissions.VALUE_ALLOW &&
            original.getPermission( ApplicationPermissions.PERMISSION_SCREEN_CAPTURE ) == ApplicationPermissions.VALUE_ALLOW &&
            original.getPermission( ApplicationPermissions.PERMISSION_EXTERNAL_CONNECTIONS ) == ApplicationPermissions.VALUE_ALLOW &&
            original.getPermission( ApplicationPermissions.PERMISSION_FILE_API ) == ApplicationPermissions.VALUE_ALLOW ) 
        {
                // All of the necessary permissions are currently available.  
                return;
        }

        // Create a permission request for each of the permissions your application
        // needs. Note that you do not want to list all of the possible permission
        // values since that provides little value for the application or the user.  
        // Please only request the permissions needed for your application.
        ApplicationPermissions permRequest = new ApplicationPermissions();
        permRequest.addPermission( ApplicationPermissions.PERMISSION_MEDIA );
        permRequest.addPermission( ApplicationPermissions.PERMISSION_SCREEN_CAPTURE );
        permRequest.addPermission( ApplicationPermissions.PERMISSION_EXTERNAL_CONNECTIONS );
        permRequest.addPermission( ApplicationPermissions.PERMISSION_FILE_API );
        
        boolean acceptance = ApplicationPermissionsManager.getInstance().invokePermissionsRequest( permRequest );
        
        if( acceptance ) 
        {
            // User has accepted all of the permissions.
            return;
        } 
        else 
        {
            // The user has only accepted some or none of the permissions requested. In this
            // app, we will not perform any additional actions based on this information. 
            // However, there are several screen where this information will be used throught
        	//the call to methods
            // For example, if the user denied networking capabilities then the application 
            // could disable that functionality if it was not core to the operation of the 
            // application.
        }
    }
	
    private boolean isAllowed(int permission) {
        ApplicationPermissions original = ApplicationPermissionsManager.getInstance().getApplicationPermissions();
        return original.getPermission(permission) == ApplicationPermissions.VALUE_ALLOW;
    }
    
   
   public boolean  isScreenCapturePermitted(){
	  return isAllowed(ApplicationPermissions.PERMISSION_SCREEN_CAPTURE);
    }
  
}